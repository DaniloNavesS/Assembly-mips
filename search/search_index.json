{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MIPS - ASSEMBLY","text":""},{"location":"#estrutura-main","title":"Estrutura main","text":"<pre><code>    .data           # Se\u00e7\u00e3o de dados\n    .text           # Se\u00e7\u00e3o de c\u00f3digo\n    main:           # R\u00f3tulo\n    li $v0, 10 # Encerra o codigo, parecido com return 0\n    syscall\n</code></pre>"},{"location":"#registradores","title":"Registradores","text":"# do Reg. Nome Descri\u00e7\u00e3o 0 $zero Retorna valor 0 2~3 $v0-$v1 (values) separado para setar valores de syscall 4~7 $a0-$a3 Registradores de Argumentos 8~15 $t0-$t7 Registradores Tempor\u00e1rios 16~23 $s0-$s7 Registradores de Perman\u00eancia 24~25 $t8-$s9 Registradores Tempor\u00e1rios"},{"location":"#operacoes","title":"Opera\u00e7\u00f5es","text":"<p>Opera\u00e7\u00f5es possui o formato:</p> <pre><code>*operador* $resultado, $valor1, $valor2\n</code></pre> <p>Operadores:</p> Opera\u00e7\u00e3o Estrutura A\u00e7\u00e3o Somar add $t0, $t1, $t2 Soma o valor de $t1 + $t2 e o resultado vai para o $t0"},{"location":"#funcoes","title":"Fun\u00e7\u00f5es","text":"Call Fun\u00e7\u00e3o Estrutura A\u00e7\u00e3o Mover move $t0, $v0 Transfere o valor de $t0 para $v0"},{"location":"#exemplo-de-codigo","title":"Exemplo de c\u00f3digo","text":"<pre><code>.data\n    msg: .asciiz \"Hello word\\n\" # Criar um const com caracteres ascii\n\n.text\nmain:\n    li $v0, 4\n    la $a0, msg\n    syscall\n\n    li $v0, 10 # Encerra o codigo, parecido com return 0\n    syscall\n</code></pre>"},{"location":"arquitetura/","title":"MIPS - ASSEMBLY","text":""},{"location":"arquitetura/#representacoes-das-instrucoes","title":"Representa\u00e7\u00f5es das instru\u00e7\u00f5es","text":"<p>S\u00e3o separadoss em 3 formatos padr\u00f5es:</p> <p>Tipo R (3 Registradores)</p> op rs rt rd shant function 6 bits 5 bits 5 bits 5 bits 5 bits 6 bits <p>op: c\u00f3digo da opera\u00e7\u00e3o</p> <p>funct: c\u00f3digo aritmetico</p> <p>rs e rt: registradores de opera\u00e7\u00e3o (em ordem)</p> <p>rd: operador de destino</p> <p>shant: tamanho do deslocamento</p> op rs rt rd shant function Tipo R $s1 $s2 $st0 0 add 0 17 18 8 0 32 <p>Tipo I (2 Regs e 1 const )</p> op rs rt constante / end 6 bits 5 bits 5 bits 16 bits <p>op: c\u00f3digo da opera\u00e7\u00e3o</p> <p>rs e rt: registradores de opera\u00e7\u00e3o (em ordem)</p> <p>OBS: No tipo I, a constante varia de -2^15 a 2^15-1</p> Tipo I $t0 $s0 21 4 8 16 21"},{"location":"arquitetura/#deslocamento-de-memoria","title":"Deslocamento de mem\u00f3ria","text":"<p>1. Deslocamento de m\u00e9moria tipo R</p> <p>Esquerda</p> <pre><code>    sll $t0, $s0, 4\n</code></pre> <p>4 = quantidade de bits -&gt; shamt</p> <p>Direita</p> <pre><code>    srl $t0, $s0, 10\n</code></pre>"},{"location":"examples/","title":"Exemplos resolvidos em Assembly Mips","text":""},{"location":"examples/#ola-mundo","title":"Ol\u00e1 mundo","text":"<p>Printa ol\u00e1 mundo na saida.</p> <pre><code>.data\n    msg: .asciiz \"Ola mundo\\n\"      # Criar um const com valor \"Ola mundo\"\n\n.text\nmain:\n    li $v0, 4               # imprime uma label \n    la $a0, msg             # la = Load adress, carrega um adress da .data\n    syscall\n\n    li $v0, 10              # Encerra o codigo, parecido com return 0\n    syscall\n</code></pre>"},{"location":"examples/#soma-de-inteiros","title":"Soma de inteiros","text":"<pre><code>.data\n    br: .asciiz \"\\n\"        # Quebra de linha \n.text\n\nmain:\n    li $v0, 5               # L\u00ea uma linha de inteiros\n    syscall\n    move $t0, $v0           # Pega o valor digitado e adiciona no $t0\n\n    li $v0, 5               # L\u00ea uma linha de inteiros\n    syscall\n    move $t1, $v0           # Pega o valor digitado e adiciona no $t1\n\n    add $a0, $t0, $t1       # Efetua a operacao de soma\n\n    li $v0, 1               # imprime o valor de $a0, no caso, o resultado da soma\n    syscall\n\n    la $a0, br              # Carrega o \"/n\"\n    li $v0, 4               # Imprime a break line (br)\n    syscall\n\n    li $v0, 10              # Encerra o programa\n    syscall\n</code></pre>"}]}